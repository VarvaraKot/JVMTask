
public class JvmComprehension {
    //Когда в коде встречается новый класс, например JvmComprehension, он отдается для загрузки в систему
    //загрузчиков классов: Bootstrap ClassLoader, Platform ClassLoader, Application ClassLoader.
    //Связывание Linking - здесь происходит подготовка классов к выполнению.
    //Verify (проверка) - проверка, что код валиден.
    //Prepare (подготовка) - подготовка примитивов в статических полях.
    //Resolve (разрешение символьных ссылок) - связывание ссылок на другие классы.
    //Далее выполняется Инициализация класса Initialization:
    //выполняются static инициализаторы и инициализаторы static полей.
    //Runtime Data Area - области памяти
    //Metaspace (область памяти,где хранится мета-информация) - сюда загружаются данные о классе (имя, методы, поля и др);
    //Еe размер можно настроить параметром запуска
    //Garbage Collection - сборка мусора, периодически собирает объекты из памяти Heap
    //которые больше не используются
    public static void main(String[] args) { //В момент вызова метода создается фрейм (кадр) в стеке Stack Memory
        int i = 1;                      // 1 создается в теле метода main примитивная переменная int со значением 1
                                        // хранится в стеке Stack Memory
        Object o = new Object();        // 2 в Heap куче создается объект Object, после этого будет выполнена левая часть
                                        // создастся переменная со ссылкой на этот объект (будет присвоена в "o")
                                        // ссылка на объект хранится в стеке Stack Memory
        Integer ii = 2;                 // 3 будет сохранена в стеке
        printAll(o, i, ii);             // 4 создается новый кадр(фрейм) в стеке Stack Memory и в теле данного
                                        //метода создаются поля, куда передается ссылка на объект и значения переменных i и ii
        System.out.println("finished"); // 7 в Heap выделяется место под строку String, где будет храниться значение - finished
                                        //в теле метода -  println() появляется поле, которое хранит ссылку на строку
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5 переменная будет сохранена в стеке со значением в теле метода printAll()
        System.out.println(o.toString() + i + ii);  // 6 создается фрейм(кадр) в стеке, куда в качестве параметра передастся
                                                    // ссылка на объект и значения переменных i и ii
    }
}

